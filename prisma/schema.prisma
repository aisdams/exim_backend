// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  
  user_code String   @id @default(uuid())
  name      String   @db.VarChar(255)
  email     String   @unique
  photo     String?  @default("https://i.postimg.cc/wB8wQtrs/avatar.png")
  verified  Boolean? @default(true)

  password String
  role     Role? @default(user)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([email])
  @@map(name: "users")
}

model Customer {
  customer_code String @id @default(uuid())
  partner_name String
  unit String
  address String
  
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  Quotation Quotation[]
  JobOrder JobOrder[]
  JOC JOC[]
  @@map(name: "customer")
  
}

model Port {
  port_code String @id @default(uuid())
  port_name String
  caption String?
  
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  Quotation Quotation[]
  JobOrder JobOrder[]
  @@map(name: "port")
  
}

model Cost {
  item_cost String @id @default(uuid())
  item_name String
  qty String
  unit String
  mata_uang MataUang @default(IDR)
  amount String
  price String
  note String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
  Quotation Quotation[]
}

model Quotation {
  quo_no String @id @default(uuid())
  sales String
  subject String?
  attn String
  type String
  delivery String
  kurs String
  loading String
  discharge String
  no_count String
  status StatusCheck? @default(InProgress)

  customer Customer    @relation(fields: [customer_code], references: [customer_code])
  customer_code String @db.VarChar(255)
  cost Cost            @relation(fields: [item_cost], references: [item_cost])
  item_cost String     @db.VarChar(255)
  port Port            @relation(fields: [port_code], references: [port_code])
  port_code String     @db.VarChar(255)

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
  JobOrder JobOrder[]
  JOC JOC[]
  @@map(name: "quotation")
}

model JobOrder {
  jo_no String @id @default(uuid())
  jo_date String
  shipper String?
  consignee String?
  qty String
  hbl String
  mbl String
  etd String
  eta String
  vessel String
  gross_weight String
  volume String
  name_of_goods String
  createdBy String

  quotation Quotation @relation(fields: [quo_no], references: [quo_no])
  
  quo_no String @db.VarChar(255)
  customer Customer @relation(fields: [customer_code], references: [customer_code])
  customer_code String @db.VarChar(255)
  port Port @relation(fields: [port_code], references: [port_code])
  port_code String @db.VarChar(255)

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
  JOC JOC[]
}

model JOC {
  joc_no String @id @default(uuid())
  no_mbl String
  status StatusCheck? @default(InProgress)
  vessel String
  no_container String
  general_purpose String
  loading String
  discharge String
  etd String
  eta String

  quotation Quotation   @relation(fields: [quo_no], references: [quo_no])
  quo_no String         @db.VarChar(255)
  jobOrder JobOrder     @relation(fields: [jo_no], references: [jo_no])
  jo_no String          @db.VarChar(255)
  customer Customer     @relation(fields: [customer_code], references: [customer_code])
  customer_code String @db.VarChar(255)
  
  createdBy String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

enum MataUang {
  IDR
  USD
}

enum Role {
  user
  admin
}

enum StatusCheck  {
  Executed
  InProgress
  Cancel
}